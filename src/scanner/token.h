/*
 * Copyright (c) 2022, Roland Marchand <roland.marchand@protonmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#pragma once

#include "substring.h"

enum token_type{
	/* single-character tokens */
	TOKEN_ARROW = 0, TOKEN_COMMA, TOKEN_DOT, TOKEN_LEFT_BRACE,
	TOKEN_LEFT_PAREN, TOKEN_LEFT_SQUARE, TOKEN_MINUS,
	TOKEN_PERCENT, TOKEN_NEWLINE, TOKEN_PLUS, TOKEN_RIGHT_BRACE,
	TOKEN_RIGHT_PAREN, TOKEN_RIGHT_SQUARE, TOKEN_SEMICOLON,
	TOKEN_SLASH, TOKEN_STAR, TOKEN_TAB,

	/* one or two character tokens */
	TOKEN_COLON, TOKEN_COLON_COLON,
	TOKEN_BANG, TOKEN_BANG_EQUAL,
	TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
	TOKEN_GREATER, TOKEN_GREATER_EQUAL,
	TOKEN_LESS, TOKEN_LESS_EQUAL,

	/* literals */
	TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,

	/* keywords */
	TOKEN_AND, TOKEN_ARRAY, TOKEN_AS, TOKEN_BOOL, TOKEN_BREAK,
	TOKEN_BYTE, TOKEN_CONST, TOKEN_CONTINUE, TOKEN_ELSE,
	TOKEN_ENUM, TOKEN_FALSE, TOKEN_FLOAT, TOKEN_FUNC, TOKEN_IF,
	TOKEN_INT, TOKEN_MAP, TOKEN_OR, TOKEN_PASS, TOKEN_PRINT,
	TOKEN_PRINT_ERR, TOKEN_RECIPE, TOKEN_REF, TOKEN_RETURN,
	TOKEN_SBYTE, TOKEN_STR, TOKEN_TRUE, TOKEN_UINT, TOKEN_WHILE,

	/* misc */
	TOKEN_INVALID, TOKEN_END_OF_FILE
};

struct token {
	struct substring lexeme;
	enum token_type type;
	int line;
};
